from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import requests
import io
import os
import logging
import base64
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

def translate_text(text):
    """–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ Google Translate"""
    if not any(char.lower() in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for char in text):
        return text
    
    logger.info(f"üß† –ü–µ—Ä–µ–≤–æ–¥: '{text}'")
    try:
        url = "https://translate.googleapis.com/translate_a/single"
        params = {
            'client': 'gtx',
            'sl': 'ru',
            'tl': 'en',
            'dt': 't',
            'q': text
        }
        
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            result = response.json()
            translation = result[0][0][0]
            logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–µ–ª: '{translation}'")
            return translation
        else:
            return text
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

def generate_img2img_hf(prompt, image_data):
    """–ù–∞—Å—Ç–æ—è—â–∏–π img2img —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ HF API"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        image_b64 = base64.b64encode(image_data).decode('utf-8')
        
        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç
        models = [
            "lllyasviel/sd-controlnet-canny",
            "runwayml/stable-diffusion-v1-5",
            "stabilityai/stable-diffusion-2-1"
        ]
        
        for model in models:
            try:
                logger.info(f"üîß –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Inference API
                url = f"https://api-inference.huggingface.co/models/{model}"
                
                payload = {
                    "inputs": prompt,
                    "parameters": {
                        "image": image_b64,
                        "strength": 0.7,
                        "guidance_scale": 7.5
                    }
                }
                
                response = requests.post(url, json=payload, timeout=60)
                logger.info(f"üì° –°—Ç–∞—Ç—É—Å {model}: {response.status_code}")
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ –£—Å–ø–µ—Ö —Å {model}!")
                    return response.content
                elif response.status_code == 503:
                    logger.info(f"‚è≥ –ú–æ–¥–µ–ª—å {model} –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
                    time.sleep(5)  # –ñ–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    response = requests.post(url, json=payload, timeout=60)
                    if response.status_code == 200:
                        return response.content
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
                continue
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HF img2img: {e}")
        return None

def generate_text2img(prompt):
    """–û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations"""
    try:
        import urllib.parse
        encoded_prompt = urllib.parse.quote(prompt)
        url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?model=nanobanano"
        
        response = requests.get(url, timeout=60)
        if response.status_code == 200:
            return response.content
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Pollinations: {e}")
        return None

@app.route('/generate', methods=['POST'])
def generate_image_route():
    try:
        prompt = request.form.get('prompt', '')
        image_file = request.files.get('image')
        
        if not prompt:
            return jsonify({"error": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"}), 400

        translated_prompt = translate_text(prompt)
        logger.info(f"üåê –ü–µ—Ä–µ–≤–æ–¥: '{translated_prompt}'")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º img2img
        if image_file and image_file.filename:
            logger.info("üé® –†–µ–∂–∏–º img2img —á–µ—Ä–µ–∑ Hugging Face")
            image_data = image_file.read()
            
            result = generate_img2img_hf(translated_prompt, image_data)
            if result:
                logger.info("‚úÖ Img2Img —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                return send_file(io.BytesIO(result), mimetype='image/png')
            else:
                logger.warning("‚ö†Ô∏è Img2img –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º text2img")
                # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                result = generate_text2img(f"{translated_prompt} - based on similar style")
                if result:
                    return send_file(io.BytesIO(result), mimetype='image/png')
        
        # –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        logger.info("üÜï –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
        result = generate_text2img(translated_prompt)
        if result:
            return send_file(io.BytesIO(result), mimetype='image/png')
        else:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"}), 500
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "OK", "message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
