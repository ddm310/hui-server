from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import requests
import io
import urllib.parse
import os
import random
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

def translate_text(text):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫"""
    if not any(char.lower() in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for char in text):
        return text
    
    # –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ª–æ–≤
    translations = {
        '–∫—Ä–∞—Å–∏–≤—ã–π': 'beautiful',
        '–∑–∞–∫–∞—Ç': 'sunset', 
        '–Ω–∞–¥': 'over',
        '–º–æ—Ä–µ–º': 'sea',
        '–º–æ—Ä–µ': 'sea',
        '–Ω–µ–±–æ': 'sky',
        '–≥–æ—Ä—ã': 'mountains',
        '–ª–µ—Å': 'forest',
        '–≥–æ—Ä–æ–¥': 'city',
        '—É–ª–∏—Ü–∞': 'street',
        '–¥–æ–º': 'house',
        '–∫–æ—à–∫–∞': 'cat',
        '—Å–æ–±–∞–∫–∞': 'dog',
        '—Ü–≤–µ—Ç–æ–∫': 'flower'
    }
    
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Å–ª–æ–≤
    translated = text
    for ru, en in translations.items():
        translated = translated.replace(ru, en)
    
    logger.info(f"üåê –ü–µ—Ä–µ–≤–æ–¥: '{text}' -> '{translated}'")
    return translated

@app.route('/generate', methods=['POST'])
def generate_image_route():
    try:
        if request.content_type and request.content_type.startswith('multipart/form-data'):
            prompt = request.form.get('prompt', '')
            model_name = request.form.get('model', 'nanobanano')
            image_file = request.files.get('image')
        else:
            data = request.get_json() or {}
            prompt = data.get('prompt', '')
            model_name = data.get('model', 'nanobanano')
            image_file = None
        
        if not prompt:
            return jsonify({"error": "–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: '{prompt}'")
        logger.info(f"üîß –ú–æ–¥–µ–ª—å: {model_name}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ img2img –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if image_file and image_file.filename:
            logger.info("üñºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return jsonify({"error": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ'."}), 400
        
        # –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (text2img)
        translated_prompt = translate_text(prompt)
        logger.info(f"üåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{translated_prompt}'")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations
        encoded_prompt = urllib.parse.quote(translated_prompt)
        seed = random.randint(1, 1000000)
        
        url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?model={model_name}&width=512&height=512&seed={seed}"
        
        logger.info(f"üì° –ó–∞–ø—Ä–æ—Å –∫: {url}")
        response = requests.get(url, timeout=30)
        
        logger.info(f"üì° –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}")
        
        if response.status_code == 200:
            logger.info("‚úÖ –£–°–ü–ï–•: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
            return send_file(io.BytesIO(response.content), mimetype='image/png')
        else:
            error_msg = response.text[:200] if response.text else "Unknown error"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}")
            return jsonify({"error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç."}), 500
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "OK", "message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"})

@app.route('/', methods=['GET'])
def home():
    return jsonify({"message": "Image Generator API", "status": "active"})

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(host='0.0.0.0', port=5000, debug=False)
