from flask import Flask, request, send_file
from flask_cors import CORS
import requests
import io
import base64
import json
import os

app = Flask(__name__)
CORS(app)

OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

if not OPENROUTER_API_KEY:
    print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")

def analyze_with_claude(image_data, user_prompt):
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Claude 3 Vision"""
    try:
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Claude 3...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        image_b64 = base64.b64encode(image_data).decode('utf-8')
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è Claude –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É—Ä–±–∞–Ω–∏—Å—Ç–∏–∫–µ –∏ —Ñ—É—Ç—É—Ä–æ–ª–æ–≥–∏–∏. 
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—à–∏, –∫–∞–∫ —ç—Ç–æ –º–µ—Å—Ç–æ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —á–µ—Ä–µ–∑ 10 –ª–µ—Ç —Å —É—á–µ—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."""
        
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "anthropic/claude-3-sonnet",  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                "messages": [
                    {
                        "role": "system",
                        "content": system_prompt
                    },
                    {
                        "role": "user", 
                        "content": [
                            {
                                "type": "text",
                                "text": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç: '{user_prompt}'. –û–ø–∏—à–∏ –∫–∞–∫ —ç—Ç–æ –º–µ—Å—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —á–µ—Ä–µ–∑ 10 –ª–µ—Ç."
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_b64}"
                                }
                            }
                        ]
                    }
                ],
                "max_tokens": 500
            },
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            description = result['choices'][0]['message']['content']
            print(f"‚úÖ Claude –∞–Ω–∞–ª–∏–∑: {description}")
            return description
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Claude: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

def generate_with_pollinations(prompt):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Pollinations"""
    try:
        print("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ö–æ–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è URL
        import urllib.parse
        encoded_prompt = urllib.parse.quote(prompt)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Pollinations (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
        url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?width=512&height=512"
        
        response = requests.get(url, timeout=60)
        
        if response.status_code == 200:
            print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
            return response.content
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return None

@app.route('/generate', methods=['POST'])
def generate():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        user_prompt = request.form.get('prompt', '')
        image_file = request.files.get('image')
        
        print(f"üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {user_prompt}")
        
        if not image_file:
            return {"error": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}, 400
        
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = image_file.read()
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Claude
        detailed_prompt = analyze_with_claude(image_data, user_prompt)
        
        if not detailed_prompt:
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            detailed_prompt = f"how this place will look in 10 years: {user_prompt}"
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result_image = generate_with_pollinations(detailed_prompt)
        
        if result_image:
            return send_file(io.BytesIO(result_image), mimetype='image/png')
        else:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}, 500
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}, 500

@app.route('/health', methods=['GET'])
def health_check():
    return {"status": "OK", "message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

if __name__ == '__main__':
    print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
    app.run(host='0.0.0.0', port=5000)
