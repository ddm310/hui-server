from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import requests
import io
import os
import logging
import random
import urllib.parse
from PIL import Image

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

def translate_text(text):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥"""
    if not any(char.lower() in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for char in text):
        return text
    try:
        url = "https://translate.googleapis.com/translate_a/single"
        params = {'client': 'gtx', 'sl': 'ru', 'tl': 'en', 'dt': 't', 'q': text}
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            return response.json()[0][0][0]
        return text
    except:
        return text

def analyze_image_for_prompt(image_data, original_prompt):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        img = Image.open(io.BytesIO(image_data))
        width, height = img.size
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        if width > height:
            orientation = "landscape"
            ratio = "wide"
        elif height > width:
            orientation = "portrait" 
            ratio = "tall"
        else:
            orientation = "square"
            ratio = "square"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
        if width >= 1000 or height >= 1000:
            image_type = "high resolution"
        else:
            image_type = "standard"
        
        # –°–æ–∑–¥–∞—ë–º —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        smart_prompt = f"{original_prompt} - {orientation} {ratio} composition, {image_type} quality, maintaining original style and colors --style realistic --seed {random.randint(1, 1000000)}"
        
        logger.info(f"üí° –£–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {smart_prompt}")
        return smart_prompt
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        return f"{original_prompt} --style realistic --seed {random.randint(1, 1000000)}"

def generate_with_pollinations(prompt):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations"""
    try:
        encoded_prompt = urllib.parse.quote(prompt)
        url = f"https://image.pollinations.ai/prompt/{encoded_prompt}"
        
        logger.info(f"üåê –ó–∞–ø—Ä–æ—Å –∫ Pollinations: {url[:100]}...")
        
        response = requests.get(url, timeout=30)
        
        if response.status_code == 200:
            return response.content
        else:
            logger.error(f"‚ùå Pollinations –æ—à–∏–±–∫–∞: {response.status_code}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Pollinations: {e}")
        return None

@app.route('/generate', methods=['POST'])
def generate_image_route():
    try:
        prompt = request.form.get('prompt', '')
        image_file = request.files.get('image')
        
        if not prompt:
            return jsonify({"error": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"}), 400

        translated_prompt = translate_text(prompt)
        logger.info(f"üéØ –û—Ä–∏–≥–∏–Ω–∞–ª: '{prompt}'")
        logger.info(f"üéØ –ü–µ—Ä–µ–≤–æ–¥: '{translated_prompt}'")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —Å–æ–∑–¥–∞—ë–º —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if image_file and image_file.filename:
            logger.info("üé® –†–µ–∂–∏–º –ø—Å–µ–≤–¥–æ-img2img —á–µ—Ä–µ–∑ —É–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã")
            image_data = image_file.read()
            
            # –°–æ–∑–¥–∞—ë–º —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            smart_prompt = analyze_image_for_prompt(image_data, translated_prompt)
            result = generate_with_pollinations(smart_prompt)
            
            if result:
                logger.info("‚úÖ –ü—Å–µ–≤–¥–æ-img2img —É—Å–ø–µ—à–Ω–æ!")
                return send_file(io.BytesIO(result), mimetype='image/png')
        
        # –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        logger.info("üÜï –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
        final_prompt = f"{translated_prompt} --style realistic --seed {random.randint(1, 1000000)}"
        result = generate_with_pollinations(final_prompt)
        
        if result:
            logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            return send_file(io.BytesIO(result), mimetype='image/png')
        else:
            return jsonify({"error": "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 500
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "OK"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
