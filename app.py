from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
from google import genai
from google.genai import types
from PIL import Image
from io import BytesIO
import requests
import io
import os
import logging
import random
import urllib.parse

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini –∫–ª–∏–µ–Ω—Ç
client = genai.Client(api_key=os.getenv('GEMINI_API_KEY'))

def translate_with_deepseek(text):
    """–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ DeepSeek"""
    logger.info(f"üß† –ü–µ—Ä–µ–≤–æ–¥: '{text}'")
    try:
        response = requests.post(
            'https://api.deepseek.com/v1/chat/completions',
            headers={'Content-Type': 'application/json'},
            json={
                'model': 'deepseek-chat',
                'messages': [
                    {
                        'role': 'system', 
                        'content': 'You are a professional translator. Translate Russian to English accurately. Return only the translation without any additional text.'
                    },
                    {
                        'role': 'user', 
                        'content': f'Translate this to English: "{text}"'
                    }
                ],
                'temperature': 0.1,
                'max_tokens': 1000
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            translation = result['choices'][0]['message']['content'].strip().strip('"')
            logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–µ–ª: '{translation}'")
            return translation
        else:
            logger.error(f"‚ùå DeepSeek —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return None

def translate_text(text):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    if not any(char.lower() in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for char in text):
        return text
    
    translation = translate_with_deepseek(text)
    return translation if translation else text

@app.route('/generate', methods=['POST'])
def generate_image_route():
    try:
        prompt = request.form.get('prompt', '')
        image_file = request.files.get('image')
        
        if not prompt:
            return jsonify({"error": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"}), 400

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç
        translated_prompt = translate_text(prompt)
        logger.info(f"üåê –û—Ä–∏–≥–∏–Ω–∞–ª: '{prompt}'")
        logger.info(f"üåê –ü–µ—Ä–µ–≤–æ–¥: '{translated_prompt}'")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini + Pollinations
        if image_file and image_file.filename:
            logger.info("üé® –†–µ–∂–∏–º img2img —á–µ—Ä–µ–∑ Gemini + Pollinations")
            
            # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = image_file.read()
            image = Image.open(io.BytesIO(image_data))
            
            try:
                # –ü—Ä–æ–±—É–µ–º Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                response = client.models.generate_content(
                    model="gemini-2.0-flash-exp",
                    contents=[
                        f"Analyze this image and create a detailed image generation prompt that combines: '{translated_prompt}' with the visual elements from this image. Return ONLY the prompt text.",
                        image
                    ],
                )
                
                enhanced_prompt = response.text.strip()
                logger.info(f"üí° –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç Gemini: '{enhanced_prompt}'")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
                seed = random.randint(1, 1000000)
                final_prompt = f"{enhanced_prompt} --seed {seed}"
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Gemini –∞–Ω–∞–ª–∏–∑ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {e}")
                seed = random.randint(1, 1000000)
                final_prompt = f"{translated_prompt} --seed {seed}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Pollinations
            encoded_prompt = urllib.parse.quote(final_prompt)
            url = f"https://image.pollinations.ai/prompt/{encoded_prompt}"
            
        else:
            # –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            logger.info("üÜï –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations")
            seed = random.randint(1, 1000000)
            final_prompt = f"{translated_prompt} --seed {seed}"
            encoded_prompt = urllib.parse.quote(final_prompt)
            url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?model=nanobanano"
        
        logger.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{final_prompt}'")
        
        response = requests.get(url, timeout=60)
        
        if response.status_code == 200:
            logger.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
            return send_file(io.BytesIO(response.content), mimetype='image/png')
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"}), 500
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "OK", "message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
