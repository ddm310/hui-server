def describe_image_for_prompt(image_file):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    # 1. AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # 2. –ü—Ä–µ–¥–∑–∞–¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    # 3. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
    
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä–∞
    if image_file and image_file.filename:
        if 'portrait' in image_file.filename.lower():
            return "a portrait photo"
        elif 'landscape' in image_file.filename.lower():
            return "a landscape photo" 
        elif 'city' in image_file.filename.lower():
            return "an urban cityscape"
        else:
            return "an uploaded image"
    return "an uploaded image"

@app.route('/generate-smart', methods=['POST'])
def generate_smart():
    """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø—Å–µ–≤–¥–æ-img2img"""
    try:
        if request.content_type and request.content_type.startswith('multipart/form-data'):
            prompt = request.form.get('prompt', '')
            model_name = request.form.get('model', 'nanobanano')
            image_file = request.files.get('image')
        else:
            data = request.get_json()
            prompt = data.get('prompt', '') if data else ''
            model_name = data.get('model', 'nanobanano') if data else 'nanobanano'
            image_file = None
        
        if not prompt:
            return jsonify({"error": "–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        print(f"üìù –ü—Ä–æ–º–ø—Ç: '{prompt}'")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        image_description = ""
        if image_file and image_file.filename:
            image_description = describe_image_for_prompt(image_file)
            print(f"üñºÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_description}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if image_description:
            final_prompt = f"{prompt} - based on {image_description} maintaining similar style"
        else:
            final_prompt = prompt
        
        # –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞
        translated_prompt = translate_text(final_prompt)
        print(f"üåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{translated_prompt}'")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
        encoded_prompt = requests.utils.quote(translated_prompt)
        seed = random.randint(1, 1000000)
        url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?model={model_name}&width=512&height=512&seed={seed}"
        
        response = requests.get(url, timeout=60)
        
        if response.status_code == 200:
            return send_file(
                io.BytesIO(response.content),
                mimetype='image/png'
            )
        else:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"}), 500
            
    except Exception as e:
        return jsonify({"error": str(e)}), 500
