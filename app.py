from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import requests
import io
import urllib.parse
import os
import random
import json

app = Flask(__name__)
CORS(app)

HF_API_KEY = os.getenv('HF_API_KEY')

def translate_to_english(text):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏—Å–ø–æ–ª—å–∑—É—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–µ—Ä–µ–∑ LibreTranslate (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
        response = requests.post(
            'https://libretranslate.de/translate',
            json={
                'q': text,
                'source': 'ru',
                'target': 'en',
                'format': 'text'
            },
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            return result['translatedText']
        else:
            # –ï—Å–ª–∏ LibreTranslate –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º MyMemory
            return translate_with_mymemory(text)
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
        return text

def translate_with_mymemory(text):
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫"""
    try:
        response = requests.get(
            f"https://api.mymemory.translated.net/get",
            params={
                'q': text,
                'langpair': 'ru|en'
            },
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            return result['responseData']['translatedText']
        return text
    except:
        return text

def is_russian_text(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã"""
    russian_letters = set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')
    return any(char.lower() in russian_letters for char in text)

def generate_with_pollinations(prompt, model="pollinations", use_translation=True):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations.ai —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    final_prompt = prompt
    if use_translation and is_russian_text(prompt):
        print(f"üî§ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: '{prompt}' -> ", end="")
        final_prompt = translate_to_english(prompt)
        print(f"'{final_prompt}'")
    
    encoded_prompt = urllib.parse.quote(final_prompt)
    seed = random.randint(1, 1000000)
    
    models = {
        "pollinations": "pollinations",
        "flux": "flux", 
        "dalle": "dalle"
    }
    
    selected_model = models.get(model, "pollinations")
    
    pollinations_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?model={selected_model}&width=512&height=512&seed={seed}&nofilter=true"
    
    print(f"üîß –ú–æ–¥–µ–ª—å: {selected_model}, seed: {seed}")
    response = requests.get(pollinations_url, timeout=60)
    
    if response.status_code == 200:
        return response.content
    else:
        raise Exception(f"Pollinations error: {response.status_code}")

def generate_with_huggingface(prompt, model_name, use_translation=True):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Hugging Face —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    final_prompt = prompt
    if use_translation and is_russian_text(prompt):
        print(f"üî§ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: '{prompt}' -> ", end="")
        final_prompt = translate_to_english(prompt)
        print(f"'{final_prompt}'")
    
    model_url = f"https://api-inference.huggingface.co/models/{model_name}"
    headers = {"Authorization": f"Bearer {HF_API_KEY}"}
    
    response = requests.post(model_url, headers=headers, json={
        "inputs": final_prompt,
        "options": {"wait_for_model": True}
    })
    
    if response.status_code == 200:
        return response.content
    else:
        raise Exception(f"HF error: {response.status_code} - {response.text}")

@app.route('/generate', methods=['POST'])
def generate_image_route():
    try:
        data = request.json
        prompt = data.get('prompt', '')
        model_name = data.get('model', 'pollinations')
        
        if not prompt:
            return jsonify({"error": "–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        print(f"üé® –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {prompt}")
        print(f"üîß –ú–æ–¥–µ–ª—å: {model_name}")
        
        # –í—Å–µ –º–æ–¥–µ–ª–∏ —Ç–µ–ø–µ—Ä—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º
        if model_name in ["pollinations", "flux", "dalle"]:
            image_bytes = generate_with_pollinations(prompt, model_name, use_translation=True)
        else:
            image_bytes = generate_with_huggingface(prompt, model_name, use_translation=True)
        
        print("‚úÖ –£–°–ü–ï–•: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
        return send_file(
            io.BytesIO(image_bytes),
            mimetype='image/png'
        )
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        print(f"‚ùå {error_msg}")
        return jsonify({"error": error_msg}), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "OK", "message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"})

@app.route('/translate-test', methods=['POST'])
def translate_test():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        data = request.json
        text = data.get('text', '')
        
        if not text:
            return jsonify({"error": "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        translated = translate_to_english(text)
        
        return jsonify({
            "original": text,
            "translated": translated,
            "is_russian": is_russian_text(text)
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
