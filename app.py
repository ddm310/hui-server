from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import requests
import io
import urllib.parse
import os
import random
import json

app = Flask(__name__)
CORS(app)

HF_API_KEY = os.getenv('HF_API_KEY')

def generate_with_pollinations(prompt, model="nanobanano"):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations.ai —Å —Å–ª—É—á–∞–π–Ω—ã–º seed"""
    encoded_prompt = urllib.parse.quote(prompt)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π seed –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    seed = random.randint(1, 1000000)
    
    models = {
        "nanobanano": "nanobanano",
        "pollinations": "pollinations", 
        "flux": "flux",
        "dalle": "dalle"
    }
    
    selected_model = models.get(model, "nanobanano")
    
    # Pollinations URL —Å seed –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    pollinations_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?model={selected_model}&width=512&height=512&seed={seed}&nofilter=true"
    
    print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {selected_model}, seed: {seed}")
    response = requests.get(pollinations_url, timeout=60)
    
    if response.status_code == 200:
        return response.content
    else:
        raise Exception(f"Pollinations error: {response.status_code}")

def generate_with_nanobanano_direct(prompt):
    """–ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ NanoBanano API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã NanoBanano API
        seed = random.randint(1, 1000000)
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ß–µ—Ä–µ–∑ –∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –µ—Å–ª–∏ –µ—Å—Ç—å
        nanobanano_url = "https://api.nanobanano.com/generate"
        
        payload = {
            "prompt": prompt,
            "model": "flux",
            "width": 512,
            "height": 512,
            "steps": 20,
            "seed": seed,
            "enhance_prompt": True  # –í–∞–∂–Ω–æ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ!
        }
        
        response = requests.post(
            nanobanano_url, 
            json=payload,
            headers={"Content-Type": "application/json"},
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            if 'image' in result:
                import base64
                image_data = result['image']
                if image_data.startswith('data:image'):
                    image_data = image_data.split(',')[1]
                return base64.b64decode(image_data)
        
        # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º Pollinations —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        return generate_with_pollinations_enhanced(prompt, "nanobanano")
        
    except Exception as e:
        raise Exception(f"NanoBanano error: {str(e)}")

def generate_with_pollinations_enhanced(prompt, model="nanobanano"):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    encoded_prompt = urllib.parse.quote(prompt)
    seed = random.randint(1, 1000000)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ
    pollinations_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?model={model}&width=512&height=512&seed={seed}&enhance=true"
    
    print(f"üîß –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ: {prompt}")
    response = requests.get(pollinations_url, timeout=60)
    
    if response.status_code == 200:
        return response.content
    else:
        raise Exception(f"Pollinations enhanced error: {response.status_code}")

def generate_with_huggingface(prompt, model_name):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Hugging Face"""
    model_url = f"https://api-inference.huggingface.co/models/{model_name}"
    headers = {"Authorization": f"Bearer {HF_API_KEY}"}
    
    response = requests.post(model_url, headers=headers, json={
        "inputs": prompt,
        "options": {"wait_for_model": True}
    })
    
    if response.status_code == 200:
        return response.content
    else:
        raise Exception(f"HF error: {response.status_code} - {response.text}")

@app.route('/generate', methods=['POST'])
def generate_image_route():
    try:
        data = request.json
        prompt = data.get('prompt', '')
        model_name = data.get('model', 'nanobanano')
        
        if not prompt:
            return jsonify({"error": "–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º: {prompt}")
        print(f"üîß –ú–æ–¥–µ–ª—å: {model_name}")
        
        # –î–ª—è NanoBanano –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ
        if model_name == "nanobanano":
            image_bytes = generate_with_nanobanano_direct(prompt)
        elif model_name in ["pollinations", "flux", "dalle"]:
            image_bytes = generate_with_pollinations_enhanced(prompt, model_name)
        else:
            image_bytes = generate_with_huggingface(prompt, model_name)
        
        print("‚úÖ –£–°–ü–ï–•: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
        return send_file(
            io.BytesIO(image_bytes),
            mimetype='image/png'
        )
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        print(f"‚ùå {error_msg}")
        return jsonify({"error": error_msg}), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "OK", "message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
