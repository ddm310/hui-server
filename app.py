from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import requests
import io
import os
import logging
import base64
import random

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

NVIDIA_API_KEY = os.getenv('NVIDIA_API_KEY')

def translate_text(text):
    if not any(char.lower() in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for char in text):
        return text
    try:
        url = "https://translate.googleapis.com/translate_a/single"
        params = {'client': 'gtx', 'sl': 'ru', 'tl': 'en', 'dt': 't', 'q': text}
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            return response.json()[0][0][0]
        return text
    except:
        return text

def generate_with_nvidia_img2img(prompt, image_data):
    """Img2img —á–µ—Ä–µ–∑ FLUX Kontext - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–û–†–ú–ê–¢"""
    try:
        invoke_url = "https://ai.api.nvidia.com/v1/genai/black-forest-labs/flux.1-kontext-dev"
        
        headers = {
            "Authorization": f"Bearer {NVIDIA_API_KEY}",
            "Accept": "application/json",
        }

        # –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ñ–æ—Ä–º–∞—Ç –¥–ª—è img2img
        payload = {
            "prompt": prompt,
            "image": f"data:image/jpeg;base64,{base64.b64encode(image_data).decode('utf-8')}",
            "seed": random.randint(0, 1000000),
            "steps": 20,
            "cfg_scale": 3.5,
            "aspect_ratio": "1:1"  # –£–ø—Ä–æ—â–∞–µ–º –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
        }

        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ img2img –∑–∞–ø—Ä–æ—Å–∞...")
        response = requests.post(invoke_url, headers=headers, json=payload, timeout=60)
        
        logger.info(f"üì• –û—Ç–≤–µ—Ç: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            image_b64 = result['data'][0]['image']
            return base64.b64decode(image_b64)
        else:
            logger.error(f"‚ùå NVIDIA img2img: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ NVIDIA img2img: {e}")
        return None

def generate_with_nvidia_text2img(prompt):
    """Text2img —á–µ—Ä–µ–∑ FLUX - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–û–†–ú–ê–¢"""
    try:
        invoke_url = "https://ai.api.nvidia.com/v1/genai/black-forest-labs/flux.1-dev"
        
        headers = {
            "Authorization": f"Bearer {NVIDIA_API_KEY}",
            "Accept": "application/json",
        }

        # –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ñ–æ—Ä–º–∞—Ç –¥–ª—è text2img
        payload = {
            "prompt": prompt,
            "seed": random.randint(0, 1000000),
            "steps": 20,
            "cfg_scale": 3.5,
            "width": 512,
            "height": 512
        }

        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ text2img –∑–∞–ø—Ä–æ—Å–∞...")
        response = requests.post(invoke_url, headers=headers, json=payload, timeout=60)
        
        logger.info(f"üì• –û—Ç–≤–µ—Ç: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            image_b64 = result['data'][0]['image']
            return base64.b64decode(image_b64)
        else:
            logger.error(f"‚ùå NVIDIA text2img: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ NVIDIA text2img: {e}")
        return None

@app.route('/generate', methods=['POST'])
def generate_image_route():
    try:
        prompt = request.form.get('prompt', '')
        image_file = request.files.get('image')
        
        if not prompt:
            return jsonify({"error": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"}), 400

        translated_prompt = translate_text(prompt)
        logger.info(f"üéØ –ü—Ä–æ–º–ø—Ç: '{translated_prompt}'")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º img2img
        if image_file and image_file.filename:
            logger.info("üé® –†–µ–∂–∏–º img2img —á–µ—Ä–µ–∑ NVIDIA FLUX Kontext")
            image_data = image_file.read()
            
            result = generate_with_nvidia_img2img(translated_prompt, image_data)
            if result:
                logger.info("‚úÖ NVIDIA img2img —É—Å–ø–µ—à–Ω–æ!")
                return send_file(io.BytesIO(result), mimetype='image/png')
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º text2img –∫–∞–∫ fallback
        logger.info("üÜï –†–µ–∂–∏–º text2img —á–µ—Ä–µ–∑ NVIDIA FLUX")
        result = generate_with_nvidia_text2img(translated_prompt)
        
        if result:
            logger.info("‚úÖ NVIDIA –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            return send_file(io.BytesIO(result), mimetype='image/png')
        else:
            return jsonify({"error": "NVIDIA —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç."}), 500
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "OK"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
